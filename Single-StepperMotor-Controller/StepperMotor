/******************************************************************************/
/* BLINKY.C: LED Flasher                                                      */
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2006 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************* ***********************************/
                  
#include <stdio.h>
#include <LPC23xx.H>                    /* LPC23xx definitions                */
#include "LCD.h"                        /* Graphic LCD function prototypes    */
#include "motor.h"
#include <math.h>




/* Macro Definitions */ 
#define TEMT           (1<<6) 
#define LINE_FEED      0x0A
#define CARRIAGE_RET   0x0D
#define SPEED_UP       0x01
#define CRUISE         0x02
#define SPEED_DOWN     0x03

volatile static unsigned int delay_constant; 
volatile float  temp0,temp1,temp2,temp3; 
volatile static unsigned int flag,j;
volatile char next_state;

/* Function that turns on requested LED                                       */
void LED_On (unsigned int num) {
  FIO2SET = (1 << num);
}

/* Function that turns off requested LED                                      */
void LED_Off (unsigned int num) {
  FIO2CLR = (1 << num);
}

 __irq void T0_IRQHandler (void) {
	
	int i;
	 
	j++;
	
	LED_On (0x07);
	LED_On (0x06);
	
	for(i=0; i<120; i++)
	{  ; }
	
	LED_Off (0x07);
	
	flag=1;
	
	if (j==3000)
	{
	T0TCR         = 0;                                 /* Timer0 Enable               */
	printf( "number of pulses is : %d",j);
	}
	else
	{
	T0TCR         = 1;                                 /* Timer0 Enable               */
	T0MR0         =delay_constant;
	}
	
	T0IR          = 1;                                 /* Clear interrupt flag       */
	VICVectAddr   = 0; 
	
}


/* Function that outputs value to LEDs                                        */
void LED_Out(unsigned int value) {
  FIO2CLR = 0xFF;                       /* Turn off all LEDs                  */
  FIO2SET = (value & 0xFF);             /* Turn on requested LEDs             */
}

float fastsqrt(float val) {
    long tmp = *(long *)&val;
    tmp -= 127L<<23; /* Remove IEEE bias from exponent (-2^23) */
    /* tmp is now an appoximation to logbase2(val) */
    tmp = tmp >> 1; /* divide by 2 */
    tmp += 127L<<23; /* restore the IEEE bias from the exponent (+2^23) */
    return *(float *)&tmp;
}

void UartInit()
{
	  
		PINSEL0 |= 0x40000000;                /*  Enable TxD1 in  P0.15   */
	  PINSEL1 |= 0x00000001;                /*  Enable RxD1 in P0.16   */
	  U1LCR = 0x83;                         /* 8 bits, no Parity, 1 Stop bit */
	  U1FDR = 0;                            /* Fractional divider not used     */
	  U1DLM = 0x00;
	  U1DLL = 78;                            /* 9600 Baud Rate @ 12MHz Clock */
	  U1LCR = 0x03;                          /* DLAB = 0 */
	  U1FCR = 0x07;                          /* enable TX amp RX FIFO ,clears TX amp RX FIFO */
}
	
/* Implementation of putchar (also used by printf function to output data)    */
int  sendchar(int ch) {                 /* Write character to Serial Port    */

  while (!(U1LSR & 0x20));

  return (U1THR = ch);
}


int getkey (void)  {                     /* Read character from Serial Port   */

  while (!(U1LSR & 0x01));

  return (U1RBR);
}

/* Function that initializes LEDs                                             */
void LED_Init(void) {
	
      PINSEL10 = 0;                         /* Disable ETM interface, enable LEDs */
      FIO2DIR  = 0x000000FF;                /* P2.0..7 defined as Outputs         */
      FIO2MASK = 0x00000000;
}

void UartTx(void)
{   
		int i=0; 
		//char c[]= "My Name is Imane and I love Baba and Oummi:)";
    char c[]= "I am Imane";
		
		 /*  Keep Transmitting until Null character('\0') is reached */ 
 		 while(c[i])
 		 {
  			U1THR=c[i]; 
  			i++;
  	 }
		 
		 U1THR=LINE_FEED;
		 U1THR=CARRIAGE_RET;
}

int main (void)
 { 

	unsigned int denom;
  static unsigned int step=0;
	
	LED_Init();                                    /* LED Initialization         */
	UartInit();	 
  
	/* setup the timer interrupt */
  T0MCR         = 3;                             /* Interrupt and Reset on MR0  */
	VICVectAddr4  = (unsigned long ) T0_IRQHandler;/* Set Interrupt Vector        */
	VICVectCntl4  = 15;                            /* use it for Timer0 Interrupt */
	VICIntEnable  = (1  << 4);
	
	 next_state=0x1;
	 
	/*C0 equation: C0=frequency*sqrt(2*motor_step_angle/angular_accel)*/
	
	temp0=2*motor_step_angle;
	temp0=temp0/angular_accel;
	temp0=fastsqrt(temp0);
	temp0=temp0*frequency;

	/*Cn equation: Cn= (Cn-1)-(2*Cn-1/(4*step+1))*/	
	step++;
	denom=(step<<2)+1;
	temp1=(temp0+temp0)/denom;
	temp0=temp0- temp1;
	
	/* normalization so that delays are obtained in Microseconds */
	temp3=temp0;
	temp3=ceil(temp3);
	delay_constant=temp3;	
	flag=1;
	
	T0TCR         = 1;                             /* Timer0 Enable               */
  T0MR0         = delay_constant;
			
	while(1)
	{
			if(flag==1)
			{
				flag=0;
				
				switch(next_state)
				{
					case SPEED_UP:
								
							step++;
							if(step==12000)
							   {
								 next_state=0x2;
								 }
							denom=(step<<2)+1;
							temp1=(temp0+temp0)/denom;
							temp0=temp0- temp1;

							/* normalization so that delays are obtained in Microseconds */
							temp3=temp0;
							temp3=ceil(temp3/12);
							delay_constant=temp3;	
							break;
								 
					case CRUISE:
						    delay_constant=temp3;
					      step++;
					      if(step==3000)
							   {
								 delay_constant=temp3;
								 next_state=0x3;
								 }
						 break;
					case SPEED_DOWN:
						   printf("we are speeding down");
					 
							break;
					 default :
              printf("exit\n" );
					}
		}
	}
}
